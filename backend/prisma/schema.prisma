// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  name        String
  password    String
  bio         String?
  dateOfBirth DateTime?
  isActive    Boolean   @default(true)
  role        UserRole  @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime
  reads       Read[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model Book {
  id            BigInt   @id @default(autoincrement())
  title         String
  edition       Int?
  authors       Author[]
  language      String
  genre         Genre
  pages         Int
  tags          String[]
  isbn          String?  @unique
  publishedYear Int?
  publisher     String?
  description   String?
  coverUrl      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime
  reads         Read[]
}

enum Genre {
  FICTION
  NONFICTION
  FANTASY
  MYSTERY
  HISTORY
  SCIENCE
  BIOGRAPHY
  OTHER
}

model Author {
  id          String    @id @default(uuid())
  name        String
  books       Book[]
  dateOfBirth DateTime?
  dateOfDeath DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime
}

model Read {
  id          BigInt     @id @default(autoincrement())
  reader      User       @relation(fields: [readerId], references: [id])
  readerId    String
  book        Book       @relation(fields: [bookId], references: [id])
  bookId      BigInt
  status      ReadStatus
  currentPage Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime
  note        Note[]
  review      Review?
}

enum ReadStatus {
  UPCOMING
  READING
  COMPLETED
  DROPPED
}

model Note {
  id           BigInt   @id @default(autoincrement())
  read         Read     @relation(fields: [readId], references: [id])
  readId       BigInt
  content      String
  chapter      String?
  startingPage Int
  endingPage   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime
}

model Review {
  id        BigInt   @id @default(autoincrement())
  rating    Int
  read      Read     @relation(fields: [readId], references: [id])
  readId    BigInt   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime
}
